import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useEffect, useState } from 'react';
import {
  ARTIST_GENIUS_IDs,
  SONG_ADDRESSES,
  SONG_ARTISTS_KEYS,
  SONG_CONTRACTS
} from '../constants';
import { ethers } from 'ethers';
import useUniswap from '../hooks/useUniswap';
import Image from 'next/image';
import { Button, Card, Loading, Text } from '@nextui-org/react';
import { useAuth } from '../context/AuthContext';
import useWalletBalance from '../hooks/useWalletBalance';

const ArtistScreen = () => {
  const Router = useRouter();
  const { query, isReady } = Router;

  const { provider, signerAddress, getSigner, isConnected, getWalletAddress } =
    useAuth();

  const artistName = query.name?.toString().replace('-', ' ');

  const [artistImageURL, setArtistImageURL] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [artistHoldings, setArtistHoldings] = useState<IArtistHolding[]>([]);

  const { fetchTokenBalance } = useWalletBalance();

  useEffect(() => {
    if (!isReady) return;

    const onLoad = async () => {
      const res = await fetch(
        // @ts-ignore
        `/api/genius-artist?geniusID=${ARTIST_GENIUS_IDs[query.name as string]}`
      );
      const data = await res.json();
      const imgURL = data.imgURL;

      setArtistImageURL(imgURL);
    };

    onLoad();
  }, [isReady]);

  useEffect(() => {
    if (!isReady || !signerAddress) return;

    const calculateHoldings = async () => {
      setIsLoading(true);

      let index = 0;
      const holdings = [];
      for await (const artistKey of SONG_ARTISTS_KEYS) {
        if (artistKey === query.name) {
          const [title, balance] = await fetchTokenBalance(
            SONG_ADDRESSES[index],
            SONG_CONTRACTS[index].abi,
            signerAddress
          );
          console.log(title, balance);

          const holding: IArtistHolding = { balance, title };
          holdings.push(holding);
        }
        index++;
      }
      setArtistHoldings([...holdings]);
      setIsLoading(false);
    };

    calculateHoldings();
  }, [isReady, signerAddress]);

  return (
    <div className="min-h-screen py-8 px-24">
      <Head>
        <title>{artistName} | Finesse</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {isConnected() ? (
        <div className="text-center">
          <Text h6>{signerAddress}</Text>
        </div>
      ) : (
        <Button className="mx-auto" onClick={() => getSigner(provider)}>
          Connect Wallet
        </Button>
      )}
      <div className="flex flex-row">
        <div className="w-3/4 px-12">
          <div className="flex flex-row">
            {artistImageURL && artistImageURL.length > 0 && (
              <div>
                <Image
                  alt="Artist photo"
                  src={artistImageURL}
                  width={120}
                  height={120}
                />
              </div>
            )}
            <div className="pl-10 flex-1">
              <Text h1>{artistName}</Text>
            </div>
          </div>

          <div className="mt-12">
            <div className="grid grid-cols-2 auto-rows-fr gap-6">
              <div className="">
                <Card
                  className="border-none h-full"
                  css={{ height: '100%' }}
                  variant="flat"
                >
                  <Card.Header className="">Iron Tier</Card.Header>
                  <Card.Body className="bg-iron">
                    <Text>Mint a personalized artist NFT.</Text>
                  </Card.Body>
                  <Card.Footer className="flex justify-end">
                    <Button size="xs" color="gradient">
                      Claim
                    </Button>
                  </Card.Footer>
                </Card>
              </div>
              <div className="">
                <Card
                  className="border-none h-full"
                  css={{ height: '100%' }}
                  variant="flat"
                >
                  <Card.Header className="">Bronze Tier</Card.Header>
                  <Card.Body className="bg-bronze">
                    <Text>
                      Mint one free NFT ticket to {artistName}'s next concert.
                    </Text>
                  </Card.Body>
                  <Card.Footer className="flex justify-end">
                    <Button size="xs" color="gradient">
                      Claim
                    </Button>
                  </Card.Footer>
                </Card>
              </div>
              <div className="">
                <Card
                  className="border-none h-full"
                  css={{ height: '100%' }}
                  variant="flat"
                >
                  <Card.Header className="">Silver Tier</Card.Header>
                  <Card.Body className="bg-silver">
                    <Text>
                      Mint an unreleased song from {artistName} as an exclusive
                      NFT.
                    </Text>
                  </Card.Body>
                  <Card.Footer className="flex justify-end">
                    <Button size="xs" color="gradient">
                      Claim
                    </Button>
                  </Card.Footer>
                </Card>
              </div>
              <div className="">
                <Card
                  className="border-none h-full"
                  css={{ height: '100%' }}
                  variant="flat"
                >
                  <Card.Header className="">Gold Tier</Card.Header>
                  <Card.Body className="bg-gold">
                    <Text>
                      Get access to a special Gold tier holders-only live stream
                      from {artistName}.
                    </Text>
                  </Card.Body>
                  <Card.Footer className="flex justify-end">
                    <Button size="xs" color="gradient">
                      Claim
                    </Button>
                  </Card.Footer>
                </Card>
              </div>
              <div className="">
                <Card
                  className="border-none h-full"
                  css={{ height: '100%' }}
                  variant="flat"
                >
                  <Card.Header className="">Platinum Tier</Card.Header>
                  <Card.Body className="bg-platinum">
                    <Text>
                      Get to chat with {artistName} via text messaging.
                    </Text>
                  </Card.Body>
                  <Card.Footer className="flex justify-end">
                    <Button size="xs" color="gradient">
                      Claim
                    </Button>
                  </Card.Footer>
                </Card>
              </div>
              <div className="">
                <Card
                  className="border-none h-full"
                  css={{ height: '100%' }}
                  variant="flat"
                >
                  <Card.Header className="">Diamond Tier</Card.Header>
                  <Card.Body className="bg-diamond">
                    <Text>
                      Get on a 15 minute video call with {artistName}.
                    </Text>
                  </Card.Body>
                  <Card.Footer className="flex justify-end">
                    <Button size="xs" color="gradient">
                      Claim
                    </Button>
                  </Card.Footer>
                </Card>
              </div>
            </div>
          </div>
        </div>
        <div className="w-1/4">
          <Text h4>Your holdings in {artistName}'s songs</Text>
          {isLoading ? (
            <Loading />
          ) : (
            artistHoldings.map((holding) => {
              return (
                <Text h6>
                  {holding.title} - {holding.balance}
                </Text>
              );
            })
          )}
        </div>
      </div>
    </div>
  );
};

export default ArtistScreen;

interface IArtistHolding {
  title: string;
  balance: number;
}
